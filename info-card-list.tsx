"use client"

import { useState, useEffect, useMemo } from "react"
import { Search, Filter } from "lucide-react"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Skeleton } from "@/components/ui/skeleton"
import BusinessCard from "@/components/business-card"
import BusinessDetailModal from "@/components/business-detail-modal"
import NativeAd from "@/components/native-ad"
import InFeedAd from "@/components/in-feed-ad"
import { getBusinessCards, getCategories, incrementViewCount } from "@/lib/api"
import type { BusinessCard as BusinessCardType, Category } from "@/types/business-card"

// Ïä§ÏºàÎ†àÌÜ§ Ïª¥Ìè¨ÎÑåÌä∏Îì§
function WeatherSkeleton() {
  return (
    <div className="flex items-center justify-center space-x-3">
      <Skeleton className="h-8 w-8 rounded-full" />
      <div className="space-y-2">
        <Skeleton className="h-4 w-24" />
        <Skeleton className="h-5 w-32" />
        <Skeleton className="h-3 w-28" />
      </div>
    </div>
  )
}

function ExchangeRateSkeleton() {
  return (
    <div className="flex items-center justify-center space-x-3">
      <Skeleton className="h-8 w-8 rounded-full" />
      <div className="space-y-2">
        <Skeleton className="h-4 w-20" />
        <Skeleton className="h-5 w-28" />
        <Skeleton className="h-3 w-24" />
      </div>
    </div>
  )
}

function CardSkeleton() {
  return (
    <div className="bg-white rounded-lg shadow-sm border overflow-hidden">
      <Skeleton className="w-full h-48" />
      <div className="p-4 space-y-3">
        <Skeleton className="h-6 w-3/4" />
        <Skeleton className="h-4 w-full" />
        <Skeleton className="h-4 w-2/3" />
        <div className="space-y-2">
          <Skeleton className="h-4 w-1/2" />
          <Skeleton className="h-4 w-1/3" />
        </div>
        <div className="flex gap-2">
          <Skeleton className="h-6 w-16" />
          <Skeleton className="h-6 w-20" />
        </div>
      </div>
    </div>
  )
}

export default function InfoCardList() {
  const [businessCards, setBusinessCards] = useState<BusinessCardType[]>([])
  const [categories, setCategories] = useState<Category[]>([])
  const [loading, setLoading] = useState(true)
  const [cardsLoading, setCardsLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedCategory, setSelectedCategory] = useState<string>("all")
  const [selectedCard, setSelectedCard] = useState<BusinessCardType | null>(null)
  const [isModalOpen, setIsModalOpen] = useState(false)

  const [weatherData, setWeatherData] = useState({
    temperature: 32,
    condition: "ÎßëÏùå",
    humidity: 65,
    wind: "ÏïΩÌï®",
    icon: "‚òÄÔ∏è",
    loading: true,
  })
  const [exchangeRate, setExchangeRate] = useState({
    rate: 37.7,
    change: -0.1,
    trend: "‚ÜòÔ∏è",
    lastUpdate: "2025ÎÖÑ 1Ïõî 29Ïùº 14:30 (KST)",
    loading: true,
  })

  // Ï∫êÏãúÎêú Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
  useEffect(() => {
    const cachedWeather = localStorage.getItem("weather-data")
    const cachedExchange = localStorage.getItem("exchange-data")

    if (cachedWeather) {
      const weatherCache = JSON.parse(cachedWeather)
      const isWeatherFresh = Date.now() - weatherCache.timestamp < 6 * 60 * 60 * 1000 // 6ÏãúÍ∞Ñ
      if (isWeatherFresh) {
        setWeatherData({ ...weatherCache.data, loading: false })
      }
    }

    if (cachedExchange) {
      const exchangeCache = JSON.parse(cachedExchange)
      const isExchangeFresh = Date.now() - exchangeCache.timestamp < 12 * 60 * 60 * 1000 // 12ÏãúÍ∞Ñ
      if (isExchangeFresh) {
        setExchangeRate({ ...exchangeCache.data, loading: false })
      }
    }
  }, [])

  // Ïö∞ÏÑ†ÏàúÏúÑÎ≥Ñ Îç∞Ïù¥ÌÑ∞ Î°úÎî©
  useEffect(() => {
    const loadCriticalData = async () => {
      try {
        // 1Îã®Í≥Ñ: Ïπ¥ÌÖåÍ≥†Î¶¨ Î®ºÏ†Ä Î°úÎìú (Îπ†Î¶Ñ)
        const categoriesData = await getCategories()
        setCategories(categoriesData)
        setLoading(false) // UI Î®ºÏ†Ä ÌëúÏãú

        // 2Îã®Í≥Ñ: ÎπÑÏ¶àÎãàÏä§ Ïπ¥Îìú Î°úÎìú
        const cardsData = await getBusinessCards()
        setBusinessCards(cardsData)
        setCardsLoading(false)
      } catch (error) {
        console.error("Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïò§Î•ò:", error)
        setLoading(false)
        setCardsLoading(false)
      }
    }

    loadCriticalData()
  }, [])

  // ÎÇ†Ïî® Îç∞Ïù¥ÌÑ∞ Î°úÎî© (Î∞±Í∑∏ÎùºÏö¥Îìú)
  useEffect(() => {
    const fetchWeatherData = async () => {
      // Ï∫êÏãúÎêú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑúÎßå ÏóÖÎç∞Ïù¥Ìä∏
      const cachedWeather = localStorage.getItem("weather-data")
      const shouldUpdate = !cachedWeather || Date.now() - JSON.parse(cachedWeather).timestamp > 6 * 60 * 60 * 1000

      if (!shouldUpdate) return

      try {
        const response = await fetch(
          `https://api.openweathermap.org/data/2.5/weather?q=Bangkok&appid=0e37172b550acf74ed81a76db7f4c89f&units=metric&lang=en`,
        )

        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`)

        const data = await response.json()
        if (data.cod !== 200) throw new Error(`API Error: ${data.message || "Unknown error"}`)

        const getWeatherIcon = (weatherMain: string) => {
          switch (weatherMain.toLowerCase()) {
            case "clear":
              return "‚òÄÔ∏è"
            case "clouds":
              return "‚òÅÔ∏è"
            case "rain":
              return "üåßÔ∏è"
            case "drizzle":
              return "üå¶Ô∏è"
            case "thunderstorm":
              return "‚õàÔ∏è"
            case "snow":
              return "‚ùÑÔ∏è"
            case "mist":
            case "fog":
            case "haze":
              return "üå´Ô∏è"
            default:
              return "üå§Ô∏è"
          }
        }

        const getWeatherCondition = (weatherMain: string) => {
          switch (weatherMain.toLowerCase()) {
            case "clear":
              return "ÎßëÏùå"
            case "clouds":
              return "ÌùêÎ¶º"
            case "rain":
              return "ÎπÑ"
            case "drizzle":
              return "Ïù¥Ïä¨ÎπÑ"
            case "thunderstorm":
              return "ÎáåÏö∞"
            case "snow":
              return "Îàà"
            case "mist":
            case "fog":
            case "haze":
              return "ÏïàÍ∞ú"
            default:
              return "Íµ¨Î¶ÑÎßéÏùå"
          }
        }

        const newWeatherData = {
          temperature: Math.round(data.main.temp),
          condition: getWeatherCondition(data.weather[0].main),
          humidity: data.main.humidity,
          wind: data.wind?.speed > 5 ? "Í∞ïÌï®" : data.wind?.speed > 2 ? "Î≥¥ÌÜµ" : "ÏïΩÌï®",
          icon: getWeatherIcon(data.weather[0].main),
          loading: false,
        }

        setWeatherData(newWeatherData)

        // Ï∫êÏãúÏóê Ï†ÄÏû•
        localStorage.setItem(
          "weather-data",
          JSON.stringify({
            data: newWeatherData,
            timestamp: Date.now(),
          }),
        )
      } catch (error) {
        console.error("ÎÇ†Ïî® Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:", error)
        setWeatherData((prev) => ({
          ...prev,
          condition: "Ï†ïÎ≥¥ ÏóÜÏùå",
          loading: false,
        }))
      }
    }

    // Ï¥àÍ∏∞ Î°úÎî© ÌõÑ Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ïã§Ìñâ
    setTimeout(fetchWeatherData, 1000)
  }, [])

  // ÌôòÏú® Îç∞Ïù¥ÌÑ∞ Î°úÎî© (Î∞±Í∑∏ÎùºÏö¥Îìú)
  useEffect(() => {
    const fetchExchangeRate = async () => {
      const cachedExchange = localStorage.getItem("exchange-data")
      const shouldUpdate = !cachedExchange || Date.now() - JSON.parse(cachedExchange).timestamp > 12 * 60 * 60 * 1000

      if (!shouldUpdate) return

      try {
        const response = await fetch(`https://v6.exchangerate-api.com/v6/10ce062894c8596c1f22fb81/pair/THB/KRW`)
        const data = await response.json()

        if (data.result === "success") {
          const newRate = Math.round(data.conversion_rate * 10) / 10
          const change = Math.round((newRate - exchangeRate.rate) * 10) / 10

          const newExchangeData = {
            rate: newRate,
            change: change,
            trend: change > 0 ? "‚ÜóÔ∏è" : change < 0 ? "‚ÜòÔ∏è" : "‚Üí",
            lastUpdate: new Date().toLocaleString("ko-KR", {
              year: "numeric",
              month: "long",
              day: "numeric",
              hour: "2-digit",
              minute: "2-digit",
              timeZoneName: "short",
            }),
            loading: false,
          }

          setExchangeRate(newExchangeData)

          // Ï∫êÏãúÏóê Ï†ÄÏû•
          localStorage.setItem(
            "exchange-data",
            JSON.stringify({
              data: newExchangeData,
              timestamp: Date.now(),
            }),
          )
        }
      } catch (error) {
        console.error("ÌôòÏú® Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:", error)
        setExchangeRate((prev) => ({ ...prev, loading: false }))
      }
    }

    // Ï¥àÍ∏∞ Î°úÎî© ÌõÑ Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ïã§Ìñâ
    setTimeout(fetchExchangeRate, 1500)
  }, [])

  const handleDetailClick = async (card: BusinessCardType) => {
    setSelectedCard(card)
    setIsModalOpen(true)

    try {
      await incrementViewCount(card.id)
    } catch (error) {
      console.error("Ï°∞ÌöåÏàò Ï¶ùÍ∞Ä Ïò§Î•ò:", error)
    }
  }

  const handleCloseModal = () => {
    setIsModalOpen(false)
    setSelectedCard(null)
  }

  // Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖòÏúºÎ°ú ÌïÑÌÑ∞ÎßÅ ÏÑ±Îä• ÏµúÏ†ÅÌôî
  const filteredCards = useMemo(() => {
    return businessCards.filter((card) => {
      const matchesSearch =
        card.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        card.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
        card.tags.some((tag) => tag.toLowerCase().includes(searchTerm.toLowerCase()))

      const matchesCategory = selectedCategory === "all" || card.category === selectedCategory

      return matchesSearch && matchesCategory
    })
  }, [businessCards, searchTerm, selectedCategory])

  // ÌîÑÎ¶¨ÎØ∏ÏóÑ Ïπ¥Îìú Ï†ïÎ†¨ ÏµúÏ†ÅÌôî
  const sortedCards = useMemo(() => {
    return [...filteredCards].sort((a, b) => {
      if (a.isPremium && !b.isPremium) return -1
      if (!a.isPremium && b.isPremium) return 1
      return 0
    })
  }, [filteredCards])

  // Ï¥àÍ∏∞ Î°úÎî© ÏÉÅÌÉú (Ïπ¥ÌÖåÍ≥†Î¶¨ Î°úÎî© Ï§ë)
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <header className="bg-white shadow-sm border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div className="text-center mb-6">
              <h1 className="text-4xl font-bold text-gray-900 mb-2">
                üî• Ìï´ÌÉÄÏù¥ <span className="text-red-500">HOT THAI</span>
              </h1>
              <p className="text-xl text-gray-600 mb-2">ÌÉúÍµ≠ ÏÉùÌôúÏùò Î™®Îì† Í≤ÉÏùÑ ÌïúÎààÏóê! üáπüá≠</p>
              <p className="text-gray-500">
                ÎßõÏßë ¬∑ ÏáºÌïë ¬∑ ÏÑúÎπÑÏä§ ¬∑ ÏàôÎ∞ï ¬∑ Í¥ÄÍ¥ëÍπåÏßÄ
                <br />
                ÌÉúÍµ≠ Í±∞Ï£ºÏûêÏôÄ Ïó¨ÌñâÏûêÍ∞Ä Íº≠ ÏïåÏïÑÏïº Ìï† Ìï´Ìïú Ï†ïÎ≥¥Î•º Ï†úÍ≥µÌï©ÎãàÎã§
              </p>

              {/* ÎÇ†Ïî® Î∞è ÌôòÏú® Ïä§ÏºàÎ†àÌÜ§ */}
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6 max-w-4xl mx-auto">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-center">
                  <WeatherSkeleton />
                  <ExchangeRateSkeleton />
                </div>
              </div>
            </div>

            {/* Ïπ¥ÌÖåÍ≥†Î¶¨ Ïä§ÏºàÎ†àÌÜ§ */}
            <div className="flex flex-wrap justify-center gap-2 mb-6">
              {[1, 2, 3, 4, 5].map((i) => (
                <Skeleton key={i} className="h-6 w-20" />
              ))}
            </div>

            {/* Í≤ÄÏÉâ Ïä§ÏºàÎ†àÌÜ§ */}
            <div className="flex flex-col sm:flex-row gap-4 max-w-2xl mx-auto">
              <Skeleton className="h-10 flex-1" />
              <Skeleton className="h-10 w-full sm:w-48" />
            </div>
          </div>
        </header>

        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {[1, 2, 3, 4, 5, 6, 7, 8].map((i) => (
              <CardSkeleton key={i} />
            ))}
          </div>
        </main>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Ìó§Îçî */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="text-center mb-6">
            <h1 className="text-4xl font-bold text-gray-900 mb-2">
              üî• Ìï´ÌÉÄÏù¥ <span className="text-red-500">HOT THAI</span>
            </h1>
            <p className="text-xl text-gray-600 mb-2">ÌÉúÍµ≠ ÏÉùÌôúÏùò Î™®Îì† Í≤ÉÏùÑ ÌïúÎààÏóê! üáπüá≠</p>
            <p className="text-gray-500">
              ÎßõÏßë ¬∑ ÏáºÌïë ¬∑ ÏÑúÎπÑÏä§ ¬∑ ÏàôÎ∞ï ¬∑ Í¥ÄÍ¥ëÍπåÏßÄ
              <br />
              ÌÉúÍµ≠ Í±∞Ï£ºÏûêÏôÄ Ïó¨ÌñâÏûêÍ∞Ä Íº≠ ÏïåÏïÑÏïº Ìï† Ìï´Ìïú Ï†ïÎ≥¥Î•º Ï†úÍ≥µÌï©ÎãàÎã§
            </p>
            {/* ÎÇ†Ïî® Î∞è ÌôòÏú® Ï†ïÎ≥¥ */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6 max-w-4xl mx-auto">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-center">
                {/* Î∞©ÏΩï ÎÇ†Ïî® */}
                {weatherData.loading ? (
                  <WeatherSkeleton />
                ) : (
                  <div className="flex items-center justify-center space-x-3">
                    <div className="text-2xl">{weatherData.icon}</div>
                    <div>
                      <p className="text-sm text-gray-600">Î∞©ÏΩï Ïò§Îäò ÎÇ†Ïî®</p>
                      <p className="font-semibold text-blue-800">
                        {weatherData.temperature}¬∞C / {weatherData.condition}
                      </p>
                      <p className="text-xs text-gray-500">
                        ÏäµÎèÑ {weatherData.humidity}% ¬∑ Î∞îÎûå {weatherData.wind}
                      </p>
                    </div>
                  </div>
                )}

                {/* ÌôòÏú® Ï†ïÎ≥¥ */}
                {exchangeRate.loading ? (
                  <ExchangeRateSkeleton />
                ) : (
                  <div className="flex items-center justify-center space-x-3">
                    <div className="text-2xl">üí±</div>
                    <div>
                      <p className="text-sm text-gray-600">Î∞îÌä∏/Ïõê ÌôòÏú®</p>
                      <p className="font-semibold text-green-800">1Î∞îÌä∏ = {exchangeRate.rate}Ïõê</p>
                      <p className="text-xs text-gray-500">
                        Ï†ÑÏùº ÎåÄÎπÑ {exchangeRate.change > 0 ? "+" : ""}
                        {exchangeRate.change}Ïõê {exchangeRate.trend}
                      </p>
                    </div>
                  </div>
                )}
              </div>
              <div className="text-xs text-gray-400 text-center mt-3 border-t pt-2">
                Ï∂úÏ≤ò: OpenWeatherMap, ExchangeRate-API | ÏóÖÎç∞Ïù¥Ìä∏: {exchangeRate.lastUpdate}
                <span className="ml-2 text-blue-600">‚óè ÎÇ†Ïî® ÌïòÎ£® 4Ìöå, ÌôòÏú® ÌïòÎ£® 2Ìöå ÏóÖÎç∞Ïù¥Ìä∏</span>
                {weatherData.condition === "Ï†ïÎ≥¥ ÏóÜÏùå" && (
                  <span className="ml-2 text-red-500">‚óè ÎÇ†Ïî® Ï†ïÎ≥¥ ÏùºÏãúÏ†Å Ïò§Î•ò</span>
                )}
              </div>
            </div>
          </div>

          {/* Ïπ¥ÌÖåÍ≥†Î¶¨ ÌÉúÍ∑∏ */}
          <div className="flex flex-wrap justify-center gap-2 mb-6">
            <Badge className="bg-red-100 text-red-800">üçú ÎßõÏßë Ï†ïÎ≥¥</Badge>
            <Badge className="bg-blue-100 text-blue-800">üè® ÏàôÎ∞ï Ï†ïÎ≥¥</Badge>
            <Badge className="bg-green-100 text-green-800">üõçÔ∏è ÏáºÌïë Ï†ïÎ≥¥</Badge>
            <Badge className="bg-purple-100 text-purple-800">üéØ ÏÑúÎπÑÏä§ Ï†ïÎ≥¥</Badge>
            <Badge className="bg-orange-100 text-orange-800">üé™ Í¥ÄÍ¥ë Ï†ïÎ≥¥</Badge>
          </div>

          {/* Í≤ÄÏÉâ Î∞è ÌïÑÌÑ∞ */}
          <div className="flex flex-col sm:flex-row gap-4 max-w-2xl mx-auto">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <Input
                type="text"
                placeholder="Ìï´ÌÉÄÏù¥ÏóêÏÑú ÏõêÌïòÎäî Ï†ïÎ≥¥Î•º Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî... (Ïòà: ÎßõÏßë, ÎßàÏÇ¨ÏßÄ, Ìò∏ÌÖî)"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 pr-4 py-2 w-full"
              />
            </div>
            <Select value={selectedCategory} onValueChange={setSelectedCategory}>
              <SelectTrigger className="w-full sm:w-48">
                <Filter className="h-4 w-4 mr-2" />
                <SelectValue placeholder="Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">Ï†ÑÏ≤¥ Ïπ¥ÌÖåÍ≥†Î¶¨</SelectItem>
                {categories.map((category) => (
                  <SelectItem key={category.id} value={category.name}>
                    {category.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
      </header>

      {/* ÎÑ§Ïù¥Ìã∞Î∏å Í¥ëÍ≥† */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <NativeAd />
      </div>

      {/* Î©îÏù∏ ÏΩòÌÖêÏ∏† */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {cardsLoading ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {[1, 2, 3, 4, 5, 6, 7, 8].map((i) => (
              <CardSkeleton key={i} />
            ))}
          </div>
        ) : sortedCards.length === 0 ? (
          <div className="text-center py-12">
            <p className="text-gray-500 text-lg">ÏïÑÏßÅ Îì±Î°ùÎêú Ìï´Ìïú Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.</p>
            <p className="text-gray-400 text-sm mt-2">Í≥ß Îã§ÏñëÌïú ÌÉúÍµ≠ Ï†ïÎ≥¥Î•º ÎßåÎÇòÎ≥¥Ïã§ Ïàò ÏûàÏäµÎãàÎã§!</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {sortedCards.map((card, index) => (
              <div key={card.id}>
                <BusinessCard card={card} onDetailClick={handleDetailClick} />
                {/* Ïù∏ÌîºÎìú Í¥ëÍ≥† ÏÇΩÏûÖ (Îß§ 8Î≤àÏß∏ Ïπ¥ÎìúÎßàÎã§) */}
                {(index + 1) % 8 === 0 && <InFeedAd />}
              </div>
            ))}
          </div>
        )}
      </main>

      {/* ÏÉÅÏÑ∏ Î™®Îã¨ */}
      <BusinessDetailModal card={selectedCard} isOpen={isModalOpen} onClose={handleCloseModal} />
    </div>
  )
}
